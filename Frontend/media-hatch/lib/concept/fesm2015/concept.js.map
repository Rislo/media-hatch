{"version":3,"file":"concept.js.map","sources":["ng://concept/lib/layout/basic-layout/basic-layout.component.ts","ng://concept/lib/directives/must-match.directive.ts","ng://concept/lib/concept.module.ts","ng://concept/lib/forms/validators/must-match.ts","ng://concept/lib/services/response-headers-retriever.ts","ng://concept/lib/services/http/data-list-query-helper.ts","ng://concept/lib/utils/json-to-typed-helper.ts","ng://concept/lib/services/http/http-json-to-object.service.ts","ng://concept/lib/errors/concept-error.ts","ng://concept/lib/errors/model-error.ts","ng://concept/lib/services/http/crud.service.ts","ng://concept/lib/services/log/logger.service.ts","ng://concept/lib/services/log/console-logger.service.ts","ng://concept/lib/services/log/multi-logger.service.ts","ng://concept/lib/services/notify.service.ts","ng://concept/lib/models/key-value-pair.ts","ng://concept/lib/forms/errors/error-message.ts","ng://concept/lib/forms/errors/angular-validator-messages.ts","ng://concept/lib/utils/json-date-converter.ts","ng://concept/lib/utils/utils.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'concept-basic-layout',\r\n  templateUrl: './basic-layout.component.html',\r\n  styleUrls: ['./basic-layout.component.scss']\r\n})\r\nexport class BasicLayoutComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n}\r\n","import { Directive, Input } from '@angular/core';\r\nimport { NG_VALIDATORS, Validator, ValidationErrors, FormGroup, AbstractControl, FormControl } from '@angular/forms';\r\n\r\n// custom validator to check that two fields match\r\nexport function MustMatch(controlName: string, matchingControlName: string) {\r\n  return (formGroup: FormGroup) => {\r\n      const control = formGroup.controls[controlName];\r\n      const matchingControl = formGroup.controls[matchingControlName];\r\n\r\n      // return null if controls haven't initialised yet\r\n      if (!control || !matchingControl) {\r\n        return null;\r\n      }\r\n\r\n      // return null if another validator has already found an error on the matchingControl\r\n      if (matchingControl.errors && !matchingControl.errors.mustMatch) {\r\n          return null;\r\n      }\r\n\r\n      // set error on matchingControl if validation fails\r\n      if (control.value !== matchingControl.value) {\r\n          matchingControl.setErrors({ mustMatch: true });\r\n      } else {\r\n          matchingControl.setErrors(null);\r\n      }\r\n  };\r\n}\r\n\r\n@Directive({\r\n    selector: '[conceptMustMatch]',\r\n    providers: [{ provide: NG_VALIDATORS, useExisting: MustMatchDirective, multi: true }]\r\n})\r\nexport class MustMatchDirective implements Validator {\r\n    @Input('conceptMustMatch') mustMatch: string[] = [];\r\n\r\n    static getConfirmPasswordErrorMessage(control: AbstractControl) {\r\n        if (control.errors) {\r\n            if (control.errors.required) {\r\n                return 'Required';\r\n            }\r\n            else {\r\n                return 'Confirm password must match with new password';\r\n            }\r\n        }\r\n        else {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    validate(formGroup: FormGroup): ValidationErrors {\r\n        return MustMatch(this.mustMatch[0], this.mustMatch[1])(formGroup);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { BasicLayoutComponent } from './layout/basic-layout/basic-layout.component';\r\nimport { MustMatchDirective } from './directives/must-match.directive';\r\n\r\n@NgModule({\r\n  declarations: [BasicLayoutComponent, MustMatchDirective],\r\n  imports: [],\r\n  exports: [BasicLayoutComponent, MustMatchDirective]\r\n})\r\nexport class ConceptModule {}\r\n","import { FormControl, AbstractControl } from '@angular/forms';\r\n\r\n// custom validator to check that two fields match\r\nexport function mustMatch(matchingControl: FormControl) {\r\n    return (control: AbstractControl) => {\r\n        // return null if controls haven't initialised yet\r\n        if (!control || !matchingControl) {\r\n            return null;\r\n        }\r\n\r\n        // return null if another validator has already found an error on the matchingControl\r\n        if (control.errors && !control.errors.mustMatch) {\r\n            return null;\r\n        }\r\n\r\n        // set error on matchingControl if validation fails\r\n        if (control.value !== matchingControl.value) {\r\n            control.setErrors({ mustMatch: true });\r\n        } else {\r\n            matchingControl.setErrors(null);\r\n        }\r\n    };\r\n}\r\n\r\nexport function getMustMatchError(control: FormControl, controlName: string, matchControlName: string): string | null {\r\n    if (control.errors && control.errors.mustMatch) {\r\n        return `${controlName} must match with ${matchControlName}.`;\r\n    }\r\n    return null;\r\n}\r\n","import { HttpResponse } from '@angular/common/http';\r\n\r\nexport class ResponseHeadersRetrieverHelper {\r\n    constructor() {}\r\n\r\n    public static getJsonHeaderValue(response: HttpResponse<object>, key: string) {\r\n        const headerValue = response.headers.get(key);\r\n        if (headerValue) {\r\n            return JSON.parse(headerValue);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","import { HttpParams } from '@angular/common/http';\r\nimport { TablePaginationParams, TableParams } from './http-json-to-object.service';\r\n\r\nexport interface DataListQueryHelperConfig {\r\n  pageSizeKey: string;\r\n  pageNbKey: string;\r\n  sortKey: string;\r\n  orderKey: string;\r\n}\r\n\r\nexport class DataListQueryFilter {\r\n  constructor(public field: string, public value: string) {}\r\n}\r\n\r\nexport class DataListQueryHelper {\r\n  public static defaultConfig = {\r\n    pageSizeKey: '_limit',\r\n    pageNbKey: '_page',\r\n    sortKey: '_sort',\r\n    orderKey: '_order'\r\n  };\r\n\r\n  constructor(private config: DataListQueryHelperConfig = DataListQueryHelper.defaultConfig) {}\r\n\r\n  public getTableRequestParameters(tableParams?: TableParams): HttpParams {\r\n    let params = new HttpParams();\r\n    if (tableParams) {\r\n      params = tableParams.sort ? params.append(this.config.sortKey, tableParams.sort) : params;\r\n      params = tableParams.orderDesc ? params.append(this.config.orderKey, tableParams.orderDesc.toString()) : params;\r\n      for (const filter of tableParams.filters || []) {\r\n        params = params.append(filter.field, filter.value);\r\n      }\r\n    }\r\n    return params;\r\n  }\r\n\r\n  public getTablePaginationRequestParameters(tableParams: TablePaginationParams): HttpParams {\r\n    let params = new HttpParams();\r\n    params = tableParams.sort ? params.append(this.config.sortKey, tableParams.sort) : params;\r\n    params = tableParams.orderDesc ? params.append(this.config.orderKey, tableParams.orderDesc.toString()) : params;\r\n    params = tableParams.currentPage ? params.append(this.config.pageNbKey, tableParams.currentPage.toString()) : params;\r\n    params = tableParams.pageSize ? params.append(this.config.pageSizeKey, tableParams.pageSize.toString()) : params;\r\n    for (const filter of tableParams.filters || []) {\r\n      params = params.append(filter.field, filter.value);\r\n    }\r\n    return params;\r\n  }\r\n}\r\n","import { JsonConvert, ValueCheckingMode } from 'json2typescript';\r\n\r\nexport class JsonToTypedHelper {\r\n  public static readonly jsonConvert = new JsonConvert(undefined, ValueCheckingMode.ALLOW_NULL);\r\n\r\n  public static serialize<T>(value: T): any {\r\n    return JsonToTypedHelper.jsonConvert.serializeObject<T>(value);\r\n  }\r\n\r\n  public static serializeArray<T>(values: T[]): any {\r\n    return JsonToTypedHelper.jsonConvert.serializeArray<T>(values);\r\n  }\r\n\r\n  public static deserialize<T>(json: object, type: new () => T): T {\r\n    return JsonToTypedHelper.jsonConvert.deserializeObject(json, type);\r\n  }\r\n\r\n  public static deserializeArray<T>(json: object[], type: new () => T): T[] {\r\n    return JsonToTypedHelper.jsonConvert.deserializeArray(json, type);\r\n  }\r\n}\r\n","import { HttpClient, HttpParams, HttpHeaders, HttpErrorResponse, HttpResponse } from '@angular/common/http';\r\nimport { JsonToTypedHelper } from '../../utils/json-to-typed-helper';\r\nimport { catchError, map, mapTo } from 'rxjs/operators';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { ResponseHeadersRetrieverHelper } from '../response-headers-retriever';\r\nimport { DataListQueryHelper, DataListQueryFilter, DataListQueryHelperConfig } from './data-list-query-helper';\r\nimport { isNullOrUndefined } from 'util';\r\nimport { LoggerService } from '../log/logger.service';\r\n\r\nexport abstract class HttpJsonToObjectService {\r\n  protected dataListQueryHelper: DataListQueryHelper;\r\n\r\n  constructor(\r\n    protected http: HttpClient,\r\n    protected logger: LoggerService,\r\n    protected startsUrl = '',\r\n    dataListQueryHelperConfig: DataListQueryHelperConfig = DataListQueryHelper.defaultConfig\r\n  ) {\r\n    this.dataListQueryHelper = new DataListQueryHelper(dataListQueryHelperConfig);\r\n  }\r\n\r\n  protected get(route: string, options?: BasicOptions) {\r\n    return this.http.get(this.startsUrl + route, options).pipe(catchError(this.handleError()));\r\n  }\r\n\r\n  protected getArrayBuffer(route: string, options?: BasicOptions): Observable<ArrayBuffer> {\r\n    return this.http\r\n      .get(this.startsUrl + route, Object.assign({}, options, { responseType: 'arraybuffer' }))\r\n      .pipe(catchError(this.handleError())) as Observable<ArrayBuffer>;\r\n  }\r\n\r\n  protected getBlob(route: string, options?: BasicOptions): Observable<Blob> {\r\n    return this.http\r\n      .get(this.startsUrl + route, Object.assign({}, options, { responseType: 'blob' }))\r\n      .pipe(catchError(this.handleError())) as Observable<Blob>;\r\n  }\r\n\r\n  protected post<T>(route: string, body: T, options?: BasicOptions) {\r\n    return this.http.post(this.startsUrl + route, body, options).pipe(catchError(this.handleError()));\r\n  }\r\n\r\n  protected postAndReturnId<TBody, TId>(route: string, body: TBody, options?: BasicOptions) {\r\n    return this.http.post(this.startsUrl + route, JsonToTypedHelper.serialize(body), options).pipe(\r\n      map(x => x as TId),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  protected postAndReturnObject<T>(route: string, body: T, options?: BasicOptions) {\r\n    // TODO QNS : Map avec un deserialize\r\n    return this.http.post<T>(this.startsUrl + route, JsonToTypedHelper.serialize(body), options).pipe(catchError(this.handleError()));\r\n  }\r\n\r\n  protected postAndReturnJson<T>(route: string, body: T, type: new () => T, options?: BasicOptions) {\r\n    return this.post(route, body, options).pipe(\r\n      map(r => JsonToTypedHelper.deserialize(r, type)),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  protected put<T>(route: string, body: T, options?: BasicOptions): Observable<void> {\r\n    return this.http.put(this.startsUrl + route, JsonToTypedHelper.serialize(body), options).pipe(\r\n      mapTo(void 0),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  protected putAndReturnObject<T>(route: string, body: T, options?: BasicOptions): Observable<T> {\r\n    return this.http.put(this.startsUrl + route, JsonToTypedHelper.serialize(body), options).pipe(\r\n      map(x => x as T),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  protected patch<T>(route: string, body: T, options?: BasicOptions) {\r\n    return this.http.patch(this.startsUrl + route, JsonToTypedHelper.serialize(body), options).pipe(catchError(this.handleError()));\r\n  }\r\n\r\n  protected deleteFromRoute(route: string, options?: BasicOptions): Observable<void> {\r\n    return this.http.delete(this.startsUrl + route, options).pipe(\r\n      mapTo(void 0),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  protected deleteAndReturnObject<T>(route: string, options?: BasicOptions): Observable<T> {\r\n    return this.http.delete(this.startsUrl + route, options).pipe(\r\n      map(x => x as T),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  // protected postJson<T>(\r\n  //     route: string,\r\n  //     value: T,\r\n  //     type: new () => T,\r\n  //     options?: BasicOptions\r\n  // ): Observable<T> {\r\n  //     return this.http.post<T>(this.startsUrl + route, , options)\r\n  // }\r\n\r\n  protected getJson<T>(route: string, type: new () => T, options?: BasicOptions): Observable<T> {\r\n    return this.http.get(this.startsUrl + route, options).pipe(\r\n      map(res => {\r\n        const obj = JsonToTypedHelper.deserialize(res, type);\r\n        return obj;\r\n      }),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  protected getJsonArray<T>(route: string, type: new () => T, options?: BasicOptions, tableParams?: TableParams): Observable<T[]> {\r\n    return this.http.get(this.startsUrl + route, { params: this.getMergedHttpParams(options, tableParams) }).pipe(\r\n      map(res => JsonToTypedHelper.deserializeArray(res as object[], type)),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  protected getJsonArrayPagination<T extends object>(\r\n    paginationParams: TablePaginationParams,\r\n    route: string,\r\n    type: new () => T,\r\n    options?: BasicOptions\r\n  ): Observable<PaginationCollection<T>> {\r\n    return this.getArrayBodyWithHeaders(\r\n      route,\r\n      [TablePaginationParams.httpPaginationHeader],\r\n      type,\r\n      Object.assign({ params: this.dataListQueryHelper.getTablePaginationRequestParameters(paginationParams) }, options)\r\n    ).pipe(\r\n      map(res => {\r\n        return {\r\n          pagination: res.headers.get(TablePaginationParams.httpPaginationHeader) as PaginationHeader,\r\n          collection: res.body as T[]\r\n        };\r\n      }),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a response with an extraction of the header and the body of the type T\r\n   * @param route http route\r\n   * @param headerKeys keys to extract inside the http response header\r\n   * @param bodyType type of the http response body\r\n   * @param options http options\r\n   */\r\n  protected getJsonBodyWithHeaders<T extends object>(\r\n    route: string,\r\n    headerKeys: string[],\r\n    bodyType?: new () => T,\r\n    options?: BasicOptions\r\n  ): Observable<BodyWithHeaders<T>> {\r\n    return this.http.get<HttpResponse<object>>(this.startsUrl + route, Object.assign(options ? options : {}, { observe: 'response' })).pipe(\r\n      map(res => this.extractBodyWithHeaders(res, headerKeys, bodyType)),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a response with an extraction of the header and the body raw\r\n   * @param route http route\r\n   * @param headerKeys keys to extract inside the http response header\r\n   * @param options http options\r\n   */\r\n  protected getRawBodyWithHeaders(route: string, headerKeys: string[], options?: BasicOptions): Observable<BodyWithHeaders<any>> {\r\n    return this.http.get<HttpResponse<any>>(this.startsUrl + route, Object.assign(options ? options : {}, { observe: 'response' })).pipe(\r\n      map(res => this.extractBodyWithHeaders(res, headerKeys)),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get a response with an extraction of the header and the body of the type T\r\n   * @param route http route\r\n   * @param headerKeys keys to extract inside the http response header\r\n   * @param bodyType type of the http response body\r\n   * @param options http options\r\n   */\r\n  protected getArrayBodyWithHeaders<T extends object>(\r\n    route: string,\r\n    headerKeys: string[],\r\n    bodyType: new () => T,\r\n    options?: BasicOptions\r\n  ): Observable<ArrayBodyWithHeaders<T>> {\r\n    return this.http.get<HttpResponse<object>>(this.startsUrl + route, Object.assign(options ? options : {}, { observe: 'response' })).pipe(\r\n      map(res => this.extractArrayBodyWithHeaders(res, headerKeys, bodyType)),\r\n      catchError(this.handleError())\r\n    );\r\n  }\r\n\r\n  protected extractHeaders(response: HttpResponse<any>, headerKeys: string[]): Map<string, object> {\r\n    const headers = new Map<string, object>();\r\n    for (const key of headerKeys) {\r\n      headers.set(key, ResponseHeadersRetrieverHelper.getJsonHeaderValue(response, key));\r\n    }\r\n    return headers;\r\n  }\r\n\r\n  protected extractBodyWithHeaders<T extends object>(\r\n    response: HttpResponse<any>,\r\n    headerKeys: string[],\r\n    bodyType?: new () => T\r\n  ): BodyWithHeaders<T> {\r\n    const result = new BodyWithHeaders<T>();\r\n    result.headers = this.extractHeaders(response, headerKeys);\r\n    if (bodyType) {\r\n      result.body = JsonToTypedHelper.deserialize(response.body, bodyType);\r\n    } else {\r\n      result.body = response.body;\r\n    }\r\n    return result;\r\n  }\r\n\r\n  protected extractArrayBodyWithHeaders<T extends object>(\r\n    response: HttpResponse<any>,\r\n    headerKeys: string[],\r\n    bodyType: new () => T\r\n  ): ArrayBodyWithHeaders<T> {\r\n    const result = new ArrayBodyWithHeaders<T>();\r\n    result.headers = this.extractHeaders(response, headerKeys);\r\n    result.body = JsonToTypedHelper.deserializeArray(response.body as object[], bodyType);\r\n    return result;\r\n  }\r\n\r\n  protected setHttpParams<T = any>(name: string, value: T | T[], httpParams?: HttpParams): HttpParams {\r\n    if (isNullOrUndefined(httpParams)) {\r\n      httpParams = new HttpParams();\r\n    }\r\n    if (!isNullOrUndefined(value)) {\r\n      if (value instanceof Date) {\r\n        return httpParams.set(name, value.toISOString());\r\n      } else if (value instanceof Array) {\r\n        if (value.length > 0 && value[0] instanceof Object) {\r\n          return httpParams.set(name, JSON.stringify(JsonToTypedHelper.serializeArray<T>(value)));\r\n        } else {\r\n          return httpParams.set(name, JSON.stringify(value));\r\n        }\r\n      } else if (value instanceof Object) {\r\n        return httpParams.set(name, JSON.stringify(JsonToTypedHelper.serialize<T>(value)));\r\n      } else if (typeof value === 'string') {\r\n        return httpParams.set(name, value);\r\n      } else {\r\n        return httpParams.set(name, JSON.stringify(value));\r\n      }\r\n    }\r\n    return httpParams;\r\n  }\r\n\r\n  protected getMergedHttpParams(options?: BasicOptions, tableParams?: TableParams): HttpParams {\r\n    let mergedHttpParams = this.dataListQueryHelper.getTableRequestParameters(tableParams);\r\n    if (!isNullOrUndefined(options) && !isNullOrUndefined(options.params)) {\r\n      if (options.params instanceof HttpParams) {\r\n        for (const key of options.params.keys()) {\r\n          for (const value of options.params.getAll(key)) {\r\n            mergedHttpParams = mergedHttpParams.append(key, value);\r\n          }\r\n        }\r\n      } else {\r\n        for (const key of Object.keys(options.params)) {\r\n          if (options.params[key] instanceof Array) {\r\n            for (const value of options.params[key]) {\r\n              mergedHttpParams = mergedHttpParams.append(key, value);\r\n            }\r\n          } else {\r\n            mergedHttpParams = mergedHttpParams.append(key, options.params[key] as string);\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return mergedHttpParams;\r\n  }\r\n\r\n  protected handleError() {\r\n    return (error: HttpErrorResponse) => {\r\n      if (error.error instanceof ErrorEvent) {\r\n        // A client-side or network error occurred. Handle it accordingly.\r\n        this.logger.error(`An error occurred: ${error.error.message}`);\r\n      } else if (error instanceof TypeError) {\r\n        // A type conversion occur.\r\n        this.logger.error(`Type convertion: ${error.message}`);\r\n      } else {\r\n        this.logger.error(error.message);\r\n      }\r\n      return throwError(error.name);\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * options type for get/set/delete/put/post/patch\r\n */\r\nexport interface BasicOptions {\r\n  headers?:\r\n    | HttpHeaders\r\n    | {\r\n        [header: string]: string | string[];\r\n      };\r\n  observe?: 'body';\r\n  params?:\r\n    | HttpParams\r\n    | {\r\n        [param: string]: string | string[];\r\n      };\r\n  reportProgress?: boolean;\r\n  responseType?: 'json';\r\n  withCredentials?: boolean;\r\n}\r\n\r\nexport class BodyWithHeaders<T extends object> {\r\n  headers: Map<string, object>;\r\n  body: T;\r\n}\r\n\r\nexport class ArrayBodyWithHeaders<T extends object> {\r\n  headers: Map<string, object>;\r\n  body: T[];\r\n}\r\n\r\nexport class TableParams {\r\n  sort?: string;\r\n  orderDesc?: boolean;\r\n  filters?: DataListQueryFilter[];\r\n}\r\n\r\nexport class TablePaginationParams extends TableParams {\r\n  static readonly httpPaginationHeader = 'x-pagination';\r\n\r\n  pageSize: number;\r\n  currentPage: number;\r\n}\r\n\r\nexport interface PaginationHeader {\r\n  pageSize: number;\r\n  currentPage: number;\r\n  totalCount: number;\r\n  totalPages: number;\r\n}\r\n\r\nexport class PaginationCollection<T> {\r\n  pagination: PaginationHeader;\r\n  collection: T[];\r\n}\r\n","\r\nexport abstract class ConceptError implements Error {\r\n    name: string = 'concept error';\r\n    message: string;\r\n    stack?: string;\r\n\r\n    /**\r\n     *  ctor for a concept error\r\n     */\r\n    constructor(message?: string) {\r\n        this.message = message;\r\n    }\r\n}\r\n","import { ConceptError } from './concept-error';\r\n\r\nexport class ModelError extends ConceptError {\r\n    name: string;\r\n    message: string;\r\n    stack?: string;\r\n\r\n    /**\r\n     * ctor for a model error\r\n     */\r\n    constructor(message?: string) {\r\n        super(message);\r\n        this.name = 'model error';\r\n    }\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\n\r\nimport { HttpJsonToObjectService } from './http-json-to-object.service';\r\nimport { ModelError } from '../../errors/model-error';\r\nimport { Identity } from '../../models/identity';\r\nimport { DataListQueryHelper, DataListQueryHelperConfig } from './data-list-query-helper';\r\nimport { LoggerService } from '../log/logger.service';\r\n\r\n\r\nexport abstract class CrudService<TId extends string | number, T extends Identity<TId>> extends HttpJsonToObjectService {\r\n\r\n  constructor(\r\n    protected httpClient: HttpClient,\r\n    protected type: new() => T,\r\n    protected logger: LoggerService,\r\n    startsUrl: string = '',\r\n    dataListQueryHelperConfig: DataListQueryHelperConfig = DataListQueryHelper.defaultConfig\r\n  ) {\r\n    super(httpClient, logger, startsUrl, dataListQueryHelperConfig);\r\n  }\r\n\r\n  /**\r\n   * Create a new item\r\n   */\r\n  public create(item: T): Observable<T> {\r\n    if (!item) {\r\n      return throwError(new ModelError('created user group mustn\\'t be null.'));\r\n    }\r\n\r\n    return this.postAndReturnObject('', item);\r\n  }\r\n\r\n  /**\r\n   * Get one item\r\n   */\r\n  public read(id: TId): Observable<T> {\r\n    if (!id) {\r\n      return throwError(new ReferenceError('null reference user group id'));\r\n    }\r\n\r\n    return this.getJson<T>(`/${id}`, this.type);\r\n  }\r\n\r\n  /**\r\n   * Get all items\r\n   */\r\n  public readAll(): Observable<T[]> {\r\n    return this.getJsonArray<T>('', this.type);\r\n  }\r\n\r\n  /**\r\n   * Update an item\r\n   */\r\n  public update(item: T): Observable<void> {\r\n    if (!(item && item.id)) {\r\n      return throwError(new ModelError('updated user group mustn\\'t be null and must have an id.'));\r\n    }\r\n\r\n    return this.put<T>(`/${item.id}`, item);\r\n  }\r\n\r\n  /**\r\n   * Delete an item\r\n   */\r\n  public delete(idOrItem: TId | T): Observable<void> {\r\n    idOrItem = typeof idOrItem === 'object' ? idOrItem.id : idOrItem;\r\n    if (!idOrItem) {\r\n      return throwError(new ReferenceError('null reference user group id'));\r\n    }\r\n\r\n    return this.deleteFromRoute(`/${idOrItem}`);\r\n  }\r\n}\r\n","export const enum LogLevel {\r\n  Trace = 'Trace',\r\n  Debug = 'Debug',\r\n  Info = 'Info',\r\n  Warning = 'Warning',\r\n  Error = 'Error',\r\n  Fatal = 'Fatal'\r\n}\r\n\r\nexport abstract class LoggerService {\r\n  public abstract trace(message: string): void;\r\n  public abstract debug(message: string): void;\r\n  public abstract info(message: string): void;\r\n  public abstract warning(message: string): void;\r\n  public abstract error(message: string): void;\r\n  public abstract fatal(message: string): void;\r\n  public abstract log(level: LogLevel, message: string): void;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { LoggerService, LogLevel } from './logger.service';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class ConsoleLoggerService extends LoggerService {\r\n\r\n    public trace(message: string): void {\r\n        this.log(LogLevel.Trace, message);\r\n    }\r\n\r\n    public debug(message: string): void {\r\n        this.log(LogLevel.Debug, message);\r\n    }\r\n\r\n    public info(message: string): void {\r\n        this.log(LogLevel.Info, message);\r\n    }\r\n\r\n    public warning(message: string): void {\r\n        this.log(LogLevel.Warning, message);\r\n    }\r\n\r\n    public error(message: string): void {\r\n        this.log(LogLevel.Error, message);\r\n    }\r\n\r\n    public fatal(message: string): void {\r\n        this.log(LogLevel.Fatal, message);\r\n    }\r\n\r\n    public log(level: LogLevel, message: string) {\r\n\r\n        const messageFormatted = `[${level}] ${new Date().toISOString()}: ${message}`;\r\n\r\n        switch (level) {\r\n            case LogLevel.Trace:\r\n            case LogLevel.Debug:\r\n            case LogLevel.Info:\r\n                console.log(messageFormatted);\r\n                break;\r\n\r\n            case LogLevel.Warning:\r\n                console.warn(messageFormatted);\r\n                break;\r\n\r\n            case LogLevel.Error:\r\n            case LogLevel.Fatal:\r\n                console.error(messageFormatted);\r\n                break;\r\n        }\r\n    }\r\n}\r\n","import { Injectable, InjectionToken, Inject } from '@angular/core';\r\n\r\nimport { LoggerService, LogLevel } from './logger.service';\r\n\r\nexport const MULTI_LOGGER_SERVICES = new InjectionToken<LoggerService[]>(\r\n  'multi-logger logger services'\r\n);\r\n\r\n/**\r\n * @requires MULTI_LOGGER_SERVICES\r\n */\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class MultiLoggerService extends LoggerService {\r\n\r\n  public constructor(@Inject(MULTI_LOGGER_SERVICES) private loggerServices: LoggerService[]) {\r\n    super();\r\n  }\r\n\r\n  public trace(message: string): void {\r\n    for (const logger of this.loggerServices) {\r\n      logger.trace(message);\r\n    }\r\n  }\r\n\r\n  public debug(message: string): void {\r\n    for (const logger of this.loggerServices) {\r\n      logger.debug(message);\r\n    }\r\n  }\r\n\r\n  public info(message: string): void {\r\n    for (const logger of this.loggerServices) {\r\n      logger.info(message);\r\n    }\r\n  }\r\n\r\n  public warning(message: string): void {\r\n    for (const logger of this.loggerServices) {\r\n      logger.warning(message);\r\n    }\r\n  }\r\n\r\n  public error(message: string): void {\r\n    for (const logger of this.loggerServices) {\r\n      logger.error(message);\r\n    }\r\n  }\r\n\r\n  public fatal(message: string): void {\r\n    for (const logger of this.loggerServices) {\r\n      logger.fatal(message);\r\n    }\r\n  }\r\n\r\n  public log(level: LogLevel, message: string) {\r\n    for (const logger of this.loggerServices) {\r\n      logger.log(level, message);\r\n    }\r\n  }\r\n}\r\n","export enum NotifyKind {\r\n  Info,\r\n  Warning,\r\n  Error,\r\n  Success\r\n}\r\n\r\nexport abstract class NotifyService {\r\n  /**\r\n   * Notify a message for the specified type if the service is defined\r\n   * @param notifyService service use for notification if defined\r\n   * @param message message\r\n   * @param kind kind of notification\r\n   */\r\n  public static notify(notifyService: NotifyService | null | undefined, message: string, kind: NotifyKind): void {\r\n    // tslint:disable-next-line:no-unused-expression\r\n    notifyService && notifyService.notify(message, kind);\r\n  }\r\n\r\n  constructor() { }\r\n\r\n  /**\r\n   * Notify a message\r\n   * @param message message to notiy\r\n   * @param kind kind of notification\r\n   */\r\n  abstract notify(message: string, kind: NotifyKind): void;\r\n}\r\n","import { JsonObject, JsonProperty } from 'json2typescript';\r\n\r\n@JsonObject()\r\nexport class KeyValuePair {\r\n  constructor(key?: any, value?: any) {\r\n    this.key = key;\r\n    this.value = value;\r\n  }\r\n\r\n  @JsonProperty('key')\r\n  public key = null;\r\n\r\n  @JsonProperty('value')\r\n  public value = null;\r\n}\r\n","import { AbstractControl } from '@angular/forms';\r\n\r\n\r\nexport function controlErrorMessage(\r\n    control: AbstractControl,\r\n    ...functions: [(control: AbstractControl, ...params: any[]) => string | null, ...any[]][]) {\r\n    for (const func of functions) {\r\n        const message = func[0](control, func[1]);\r\n        if (message) {\r\n            return message;\r\n        }\r\n    }\r\n    return 'Unknown error';\r\n}\r\n","import { FormControl } from '@angular/forms';\r\n\r\nexport function getRequiredError(control: FormControl): string | null {\r\n    if (control.errors && control.errors.required) {\r\n        return `Required.`;\r\n    }\r\n    return null;\r\n}\r\n\r\nexport function getEmailError(control: FormControl): string | null {\r\n    if (control.errors && control.errors.email) {\r\n        return `No valid email.`;\r\n    }\r\n    return null;\r\n}\r\n","import { JsonCustomConvert, JsonConverter } from 'json2typescript';\r\n\r\n@JsonConverter\r\nexport class JsonDateConverter implements JsonCustomConvert<Date> {\r\n  serialize(date: Date) {\r\n    return date.toISOString();\r\n  }\r\n  deserialize(date: any): Date {\r\n    return date ? new Date(date) : null;\r\n  }\r\n}\r\n","/* tslint:disable */\r\n/**\r\n * Determines if two objects or two values are equivalent.\r\n *\r\n * Two objects or values are considered equivalent if at least one of the following is true:\r\n *\r\n * * Both objects or values pass `===` comparison.\r\n * * Both objects or values are of the same type and all of their properties are equal by\r\n *   comparing them with `equals`.\r\n *\r\n * @param o1 Object or value to compare.\r\n * @param o2 Object or value to compare.\r\n * @returns true if arguments are equal.\r\n */\r\nexport function equals(o1: any, o2: any): boolean {\r\n  if (o1 === o2) return true;\r\n  if (o1 === null || o2 === null) return false;\r\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\r\n  let t1 = typeof o1,\r\n    t2 = typeof o2,\r\n    length: number,\r\n    key: any,\r\n    keySet: any;\r\n  if (t1 == t2 && t1 == 'object') {\r\n    if (Array.isArray(o1)) {\r\n      if (!Array.isArray(o2)) return false;\r\n      if ((length = o1.length) == o2.length) {\r\n        for (key = 0; key < length; key++) {\r\n          if (!equals(o1[key], o2[key])) return false;\r\n        }\r\n        return true;\r\n      }\r\n    } else {\r\n      if (Array.isArray(o2)) {\r\n        return false;\r\n      }\r\n      keySet = Object.create(null);\r\n      for (key in o1) {\r\n        if (!equals(o1[key], o2[key])) {\r\n          return false;\r\n        }\r\n        keySet[key] = true;\r\n      }\r\n      for (key in o2) {\r\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    }\r\n  }\r\n  return false;\r\n}\r\n/* tslint:enable */\r\n\r\nexport function isDefined(value: any): boolean {\r\n  return typeof value !== 'undefined' && value !== null;\r\n}\r\n\r\nexport function isObject(item: any): boolean {\r\n  return item && typeof item === 'object' && !Array.isArray(item);\r\n}\r\n\r\nexport function mergeDeep(target: any, source: any): any {\r\n  const output = Object.assign({}, target);\r\n  if (isObject(target) && isObject(source)) {\r\n    Object.keys(source).forEach((key: any) => {\r\n      if (isObject(source[key])) {\r\n        if (!(key in target)) {\r\n          Object.assign(output, { [key]: source[key] });\r\n        } else {\r\n          output[key] = mergeDeep(target[key], source[key]);\r\n        }\r\n      } else {\r\n        Object.assign(output, { [key]: source[key] });\r\n      }\r\n    });\r\n  }\r\n  return output;\r\n}\r\n"],"names":["tslib_1.__decorate"],"mappings":"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"}
